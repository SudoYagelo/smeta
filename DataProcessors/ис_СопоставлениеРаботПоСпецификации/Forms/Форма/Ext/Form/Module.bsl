&НаКлиенте
Перем ФайлСпецификацииВыбран;

&НаСервере
Процедура ЗагрузитьСписокРаботИКатегорийНаСервере(ПутьКФайлу)
	
	Попытка
		ТабДок = Новый ТабличныйДокумент;
		ТабДок.Прочитать(ПутьКФайлу);
		
		// Очищаем таблицу
		Объект.СписокРаботИКатегорий.Очистить();
		
		// Загружаем данные
		// Предполагаем структуру: колонка 1 - Работа, колонка 2 - Категория
		Для НомерСтроки = 2 По ТабДок.ВысотаТаблицы Цикл
			
			Работа = СокрЛП(ТабДок.Область(НомерСтроки, 1).Текст);
			Категория = СокрЛП(ТабДок.Область(НомерСтроки, 2).Текст);
			
			Если НЕ ПустаяСтрока(Работа) И НЕ ПустаяСтрока(Категория) Тогда
				НоваяСтрока = Объект.СписокРаботИКатегорий.Добавить();
				НоваяСтрока.Работа = Работа;
				НоваяСтрока.Категория = Категория;
			КонецЕсли;
			
		КонецЦикла;
		
		Сообщить("Загружено " + Объект.СписокРаботИКатегорий.Количество() + " записей работ и категорий");
		
	Исключение
		Сообщить("Ошибка загрузки файла: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПозиции(Команда)
	
	Если Объект.СписокРаботИКатегорий.Количество() = 0 Тогда
		Предупреждение("Сначала загрузите список работ и категорий!");
		Возврат; 
	Иначе
		ОчиститьКолонки();
	КонецЕсли;
	
	Если Объект.РезультатыПодбора.Количество() = 0 Тогда
		Предупреждение("Сначала загрузите файл спецификации!");
		Возврат;
	КонецЕсли;
	
	Объект.ТекстыЗапросовКИИ = "";
	
	ОбработатьПозицииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьКолонки()
	
	МассивИменКолонокКОчищению = Новый Массив;
	МассивИменКолонокКОчищению.Добавить("КодСтатьи");
	МассивИменКолонокКОчищению.Добавить("Категория");
	МассивИменКолонокКОчищению.Добавить("Кодификатор");
	МассивИменКолонокКОчищению.Добавить("ЦенаРабот");
	МассивИменКолонокКОчищению.Добавить("СтоимостьПрочихМатериалов");
	МассивИменКолонокКОчищению.Добавить("ЦенаИндикатив");
	МассивИменКолонокКОчищению.Добавить("Уверенность");
	МассивИменКолонокКОчищению.Добавить("ВидРаботыНаименование");
	МассивИменКолонокКОчищению.Добавить("ВидРаботы");
	МассивИменКолонокКОчищению.Добавить("ГоловнаяНоменклатура");
	
	Для каждого СтрРезультат Из Объект.РезультатыПодбора Цикл
		Для каждого ИмяКолонки Из МассивИменКолонокКОчищению Цикл
			СтрРезультат[ИмяКолонки] = Неопределено;		
		КонецЦикла;	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбработатьПозицииНаСервере()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ОбработатьВсеПозиции();
	ЗначениеВРеквизитФормы(Обработка, "Объект");
		
КонецПроцедуры

// ДОПОЛНИТЕЛЬНЫЕ КОМАНДЫ

&НаКлиенте
Процедура ЗаполнитьКатегории(Команда)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ЗаполнитьКатегорииНаСервере();
	ЗначениеВРеквизитФормы(Обработка, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаРаботПриИзменении(Элемент)
	
	ЗаполнитьРаботыНаСервере();
	
КонецПроцедуры

Процедура ЗаполнитьРаботыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	гк_КлассификаторВидовРабот.Ссылка КАК ВидРаботы,
	|	гк_КлассификаторВидовРабот.СтатьяБДР КАК Категория,
	|	гк_КлассификаторВидовРабот.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СОКРЛП(гк_КлассификаторВидовРабот.Наименование) КАК ВидРаботыНаименование,
	|	гк_КлассификаторВидовРабот.СтатьяБДР.Наименование КАК КатегорияНаименование,
	|	гк_КлассификаторВидовРабот.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование
	|ИЗ
	|	Справочник.гк_КлассификаторВидовРабот КАК гк_КлассификаторВидовРабот
	|ГДЕ
	|	НЕ гк_КлассификаторВидовРабот.ПометкаУдаления
	|	И гк_КлассификаторВидовРабот.Ссылка В ИЕРАРХИИ(&Группа)
	|	И НЕ гк_КлассификаторВидовРабот.ЭтоГруппа
	|	И гк_КлассификаторВидовРабот.Кодификатор ПОДОБНО ""%.000""";
	
	Запрос.УстановитьПараметр("Группа", Объект.ПапкаРабот);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Объект.СписокРаботИКатегорий.Загрузить(РезультатЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЧерезТабДок(Команда)

	ОткрытьФорму("Обработка.ис_СопоставлениеРаботПоСпецификации.Форма.ФормаЗагрузкиИзТабДок",, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры   

&НаКлиенте
Процедура ОткрытьФормуЗагрузкиДанныхЧерезТабДокОкончание(ДополнительныеПараметры)

    ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимЗагрузки",		ПредопределенноеЗначение("Перечисление.бит_РежимыЗагрузки.ТабличнаяЧасть"));
    ПараметрыФормы.Вставить("ОбъектМетаданных",		"Обработка.ис_СопоставлениеРаботПоСпецификации");
    //ПараметрыФормы.Вставить("ОбъектДляЗаполнения",	Объект.Ссылка);
    ПараметрыФормы.Вставить("ИмяТабЧасти",			ДополнительныеПараметры.ИмяТаблицы);
    
    ОткрытьФорму("Обработка.бит_ЗагрузкаДанныхИзТабличногоДокумента.Форма", ПараметрыФормы, ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
  	                   
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ис_СопоставлениеРаботПоСпецификации.Форма.ФормаЗагрузкиИзТабДок" Тогда
		ТабДок = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресВХранилище);		
		
		ЗагрузитьТабДок(ТабДок);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗагрузитьТабДок(ТабДок)

	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабДок.Область());
	Построитель.Выполнить();

	ТЗ = Построитель.Результат.Выгрузить();
	
	Помещение = "";
	ТипПомещения = "";
	ОбъектСтроительства = ""; 
	ПомещениеБуфер = Ложь;
	
	Сч = 0;
	Для каждого СтрокаТЗ Из ТЗ Цикл
		
		Если СтрокаТЗ.Позиция = "" Тогда
			ОбъектСтроительства = Справочники.ОбъектыСтроительства.НайтиПоНаименованию(СтрокаТЗ.НаименованиеИТехническаяХарактеристика);
			
			Сч = Сч + 1;
			
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЗ.НаименованиеИТехническаяХарактеристика = "" Тогда 
			Если ТЗ[Сч+1].НаименованиеИТехническаяХарактеристика = "" Тогда
				Помещение = СтрокаТЗ.Позиция;
			ИначеЕсли ТЗ[Сч-1].НаименованиеИТехническаяХарактеристика = "" Тогда	
			    ТипПомещения = СтрокаТЗ.Позиция;
			Иначе
				ТипПомещения = СтрокаТЗ.Позиция;				
			КонецЕсли;
		Иначе
			СтрокаРезультат = Объект.РезультатыПодбора.Добавить();
			СтрокаРезультат.Позиция = СтрокаТЗ.Позиция;
			СтрокаРезультат.НаименованиеПозиции = СтрокаТЗ.НаименованиеИТехническаяХарактеристика;
			СтрокаРезультат.Помещение = Помещение;
			СтрокаРезультат.ТипПомещения = ТипПомещения;
			СтрокаРезультат.ОбъектСтроительства = ОбъектСтроительства;
			СтрокаРезультат.Количество = СтрокаТЗ.Количество;
			СтрокаРезультат.ЕдиницаИзмерения = СтрокаТЗ.ЕдиницаИзмерения;
			СтрокаРезультат.КодИзделия = СтрокаТЗ.КодИзделия;
			СтрокаРезультат.Завод = СтрокаТЗ.Завод_изготовитель;
		КонецЕсли;
		
		Сч = Сч + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Токен = "";
	
	МассивМоделей =  ai_Интеграция.ПолучитьМодели();
	
	Для каждого Модель Из МассивМоделей Цикл
		Элементы.МодельЗапроса.СписокВыбора.Добавить(Модель);
	КонецЦикла;
	
	Объект.МодельЗапроса = "gpt-4o";
	
	Объект.РазмерПакета = 1;
	
	Объект.ШаблонЗапроса ="Проанализируй позиции спецификаций инженерных систем.
		|
		|ПОЗИЦИИ СПЕЦИФИКАЦИЙ:
		|%1
		|
		|ДОСТУПНЫЕ РАБОТЫ ПО КАТЕГОРИИ ""%2"":
		|%3
		|
		|ЗАДАЧА: Определи наиболее подходящие работы для данных позиций.
		|
		|ПРАВИЛА АНАЛИЗА:
		|%4
		|
		|ФОРМАТ ОТВЕТА (строго JSON):
		|{
		|  ""results"": [
		|    {""category"": ""точное название категории из списка"",
		|     ""work"": ""точное название работы из списка"",
		|     ""confidence"": число от 0 до 1}
		|  ]
		|}
		|
		|Confidence: 1.0 - полное соответствие, 0.8-0.9 - высокая уверенность, 0.5-0.7 - средняя, менее 0.5 - низкая";
	
КонецПроцедуры

