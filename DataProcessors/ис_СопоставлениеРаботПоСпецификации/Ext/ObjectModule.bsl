Перем МассивКатегорий;



Функция СведенияОВнешнейОбработке() Экспорт
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
	ПараметрыРегистрации = Новый Структура;
	
	// Объявим еще одну переменную, которая нам потребуется ниже
	МассивНазначений = Новый Массив;
	
	// Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
	// Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
	
	// Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
	// Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
	// которые поддерживают механизм ВПФ
	//МассивНазначений.Добавить("Документ.ОтчетЗагруженныхФорм");
	//ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	
	// Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Наименование", "Инструменты сметчика");
	
	// Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	
	// Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
	ПараметрыРегистрации.Вставить("Версия", "1.0.0.2");    
	ПараметрыРегистрации.Вставить("Информация", "Инструменты сметчика");
	
	// Создадим таблицу команд (подробнее смотрим ниже)
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	// Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Инструменты сметчика", "ИнструментыСметчика", "ОткрытиеФормы", Истина, );
	
	// Сохраним таблицу команд в параметры регистрации обработки
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	// Теперь вернем системе наши параметры
	Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	// Создадим пустую таблицу команд и колонки в ней
	Команды = Новый ТаблицаЗначений;
	
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 
	
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	// Для печатной формы должен содержать строку ПечатьMXL 
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	Возврат Команды;
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	// Добавляем команду в таблицу команд по переданному описанию.
	// Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

#Область ПрограммныйИнтерфейс

Процедура ОбработатьВсеПозиции() Экспорт
	
	Если СписокРаботИКатегорий.Количество() = 0 Тогда
		ВызватьИсключение "Не загружен список работ и категорий!";
	КонецЕсли;
	
	Если РезультатыПодбора.Количество() = 0 Тогда
		ВызватьИсключение "Не загружена спецификация для обработки!";
	КонецЕсли;
	
	// Создаем таблицу уникальных позиций
	ТЗУникальныеПозиции = РезультатыПодбора.Выгрузить();
	ТЗУникальныеПозиции.Свернуть("НаименованиеПозиции, ТипМарка, ЕдиницаИзмерения, Завод, КодИзделия");
	
	// Обрабатываем уникальные позиции порциями по 50
	КоличествоУникальных = ТЗУникальныеПозиции.Количество();
	
	РазмерПорции = РазмерПакета;
	
	НачальныйИндекс = 0;
	
	НомерПорции = 1;
	
	Пока НачальныйИндекс < КоличествоУникальных Цикл
		
		КонечныйИндекс = Мин(НачальныйИндекс + РазмерПорции - 1, КоличествоУникальных - 1);
		
		// Формируем запрос для ChatGPT для текущей порции уникальных данных
		ТекстЗапроса = СформироватьЗапросДляУникальныхПозиций(ТЗУникальныеПозиции, НачальныйИндекс, КонечныйИндекс);
		
		ТекстыЗапросовКИИ = СтрШаблон("%1
		|Номер порции: %2. Текст запроса к ИИ для порции %2:
		|""%3""
		|
		|/////////////////////////////////
		|", ТекстыЗапросовКИИ, НомерПорции, ТекстЗапроса);
		
		// Отправляем запрос к API
		Результат = ОтправитьЗапросChatGPT(ТекстЗапроса);
		
		
		Если Результат <> Неопределено Тогда 
			РезультатПорции = гк_КоннекторHTTP.ОбъектВJson(Результат);
			
			ТекстыЗапросовКИИ = ТекстыЗапросовКИИ + Символы.ПС + "Ответ ИИ: " + РезультатПорции;
			
			ЗаполнитьРезультатыПодбораПорцией(Результат, ТЗУникальныеПозиции, НачальныйИндекс, КонечныйИндекс); 
			
		КонецЕсли;
		
		НачальныйИндекс = КонечныйИндекс + 1;
		
		НомерПорции = НомерПорции + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьЗапросДляУникальныхПозиций(ТЗУникальныеПозиции, НачальныйИндекс, КонечныйИндекс)
	
	ТаблицаКатегорий = СписокРаботИКатегорий.Выгрузить( , "Категория");
	ТаблицаКатегорий.Свернуть("Категория"); 
	
	СписокДляАнализа = "";
	
	Для Каждого СтрокаТЧ Из ТаблицаКатегорий Цикл
		
		//СписокДляАнализа = СписокДляАнализа + Символы.ПС + "Категория: " + СтрокаТЧ.Категория.Наименование;
		МассивСтрокРабот = СписокРаботИКатегорий.НайтиСтроки(Новый Структура("Категория", СтрокаТЧ.Категория));
		
		Для каждого СтрокаРаботы Из МассивСтрокРабот Цикл
			СписокДляАнализа = СписокДляАнализа + Символы.ПС + СтрокаРаботы.ВидРаботы.Наименование;
		КонецЦикла;
		
	КонецЦикла; 
	
	МассивДанныхДляАнализа = Новый Массив;
	
	// Обрабатываем только порцию уникальных данных
	Для i = НачальныйИндекс По КонечныйИндекс Цикл
		СтрокаУникальнойПозиции = ТЗУникальныеПозиции[i];
		
		ДанныеДляАнализа = НовыеДанныеДляАнализа(); 
		
		ДанныеДляАнализа.НаименованиеПозиции = СтрокаУникальнойПозиции.НаименованиеПозиции;
		ДанныеДляАнализа.ТипМарка = СтрокаУникальнойПозиции.ТипМарка;
		ДанныеДляАнализа.ЕдиницаИзмерения = СтрокаУникальнойПозиции.ЕдиницаИзмерения; 
		ДанныеДляАнализа.Завод = СтрокаУникальнойПозиции.Завод; 
		ДанныеДляАнализа.КодИзделия = СтрокаУникальнойПозиции.КодИзделия; 
		
		МассивДанныхДляАнализа.Добавить(ДанныеДляАнализа);
	КонецЦикла;
	
	ДанныеДляАнализаJSON = гк_HTTPКонекторУниверсальный.ЗначениеВСтрокуJSON(МассивДанныхДляАнализа, Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Windows));
	
	ПравилаСопоставления = ис_НастройкиИнструментов.ПравилаПапки(ПапкаРабот);
	
	ТекстЗапроса = ШаблонЗапроса;

	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ДанныеДляАнализаJSON, СписокРаботИКатегорий[0].КатегорияНаименование, СписокДляАнализа, ПравилаСопоставления); 
	
	Возврат ТекстЗапроса;

КонецФункции

Функция СформироватьЗапросДляПорции(НачальныйИндекс, КонечныйИндекс)
	
	ТаблицаКатегорий = СписокРаботИКатегорий.Выгрузить( , "Категория");
	ТаблицаКатегорий.Свернуть("Категория"); 
	
	СписокДляАнализа = "Список работ:";
	
	Для Каждого СтрокаТЧ Из ТаблицаКатегорий Цикл
		
		СписокДляАнализа = СписокДляАнализа + Символы.ПС + "Категория: " + СтрокаТЧ.Категория.Наименование;
		МассивСтрокРабот = СписокРаботИКатегорий.НайтиСтроки(Новый Структура("Категория", СтрокаТЧ.Категория));
		
		Для каждого СтрокаРаботы Из МассивСтрокРабот Цикл
			СписокДляАнализа = СписокДляАнализа + Символы.ПС + СтрокаРаботы.ВидРаботы.Наименование;
		КонецЦикла;
		
	КонецЦикла; 
	
	МассивДанныхДляАнализа = Новый Массив;
	
	// Обрабатываем только порцию данных
	Для i = НачальныйИндекс По КонечныйИндекс Цикл
		СтрокаПозиции = РезультатыПодбора[i];
		ДанныеДляАнализа = НовыеДанныеДляАнализа(); 
		
		ДанныеДляАнализа.НаименованиеПозиции = СтрокаПозиции.НаименованиеПозиции;
		ДанныеДляАнализа.ТипМарка = СтрокаПозиции.ТипМарка;
		ДанныеДляАнализа.ЕдиницаИзмерения = СтрокаПозиции.ЕдиницаИзмерения; 
		
		МассивДанныхДляАнализа.Добавить(ДанныеДляАнализа);
	КонецЦикла;
	
	ДанныеДляАнализаJSON = гк_HTTPКонекторУниверсальный.ЗначениеВСтрокуJSON(МассивДанныхДляАнализа); 
	
	ПравилаСопоставления = ис_НастройкиИнструментов.ПравилаПапки(ПапкаРабот);
	
	ТекстЗапроса = ШаблонЗапроса;

	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ДанныеДляАнализаJSON, СписокДляАнализа, ПравилаСопоставления); 
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура ЗаполнитьРезультатыПодбораПорцией(Результат, ТЗУникальныеПозиции, НачальныйИндекс, КонечныйИндекс)
	
	Если Не Результат.Свойство("results") Или Результат.results.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Обрабатываем результаты для каждой уникальной позиции
	Для i = 0 По Результат.results.Количество() - 1 Цикл
		ИндексВУникальных = НачальныйИндекс + i;
		
		Если ИндексВУникальных >= ТЗУникальныеПозиции.Количество() Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаУникальнойПозиции = ТЗУникальныеПозиции[ИндексВУникальных];
		РезультатДляПозиции = Результат.results[i];
		
		// Находим все строки в оригинальной таблице, соответствующие этой уникальной позиции
		МассивСоответствующихСтрок = РезультатыПодбора.НайтиСтроки(Новый Структура(
			"НаименованиеПозиции", СтрокаУникальнойПозиции.НаименованиеПозиции,
			//"ТипМарка", СтрокаУникальнойПозиции.ТипМарка,
			"ЕдиницаИзмерения", СтрокаУникальнойПозиции.ЕдиницаИзмерения
		));
		
		// Применяем результат ко всем соответствующим строкам
		Для Каждого СтрокаПозиции Из МассивСоответствующихСтрок Цикл
			Попытка
				
				Если ОбработатьИсключния(СтрокаПозиции) Тогда
					Продолжить;
				КонецЕсли;
				
				//Если РезультатДляПозиции.Свойство("category") Тогда
				//	СтрокаПозиции.Категория = НайтиЭлементПоНаименованию(РезультатДляПозиции.category, "КатегорияНаименование"); 
				//КонецЕсли;
				
				Если РезультатДляПозиции.Свойство("work") Тогда
					СтрокаПозиции.ВидРаботы = НайтиЭлементПоНаименованию(РезультатДляПозиции.work, "ВидРаботыНаименование");
					СтрокаПозиции.ВидРаботыНаименование = СтрокаПозиции.ВидРаботы.Наименование;
					
					Если ЗначениеЗаполнено(СтрокаПозиции.ВидРаботы) Тогда 
						СтрокаПозиции.Категория = СтрокаПозиции.ВидРаботы.СтатьяБДДС;
						
						СтрокаПозиции.Кодификатор = СтрокаПозиции.ВидРаботы.Кодификатор;
						
						СтрокаПозиции.СтоимостьПрочихМатериалов = СтрокаПозиции.ВидРаботы.СтоимостьПрочиеМатериалы;
						КоличествоМатериалов = СтрокаПозиции.ВидРаботы.Материалы.Количество();
						
						Если  КоличествоМатериалов > 0 Тогда
							СтрокаПозиции.ГоловнаяНоменклатура = СтрокаПозиции.ВидРаботы.Материалы[0].Номенклатура;                      
							
							//СтрокаПозиции.ЦенаИндикатив = ПолучитьЗначениеЦеныПродажи(СтрокаПозиции.ВидРаботы.Материалы[0].Номенклатура);
							СтрокаПозиции.ЦенаИндикатив = ПолучитьЗначениеЦеныПродажи(СтрокаПозиции.ВидРаботы.Материалы[0].Номенклатура);
							Если КоличествоМатериалов > 1 Тогда
								СтрокаПозиции.Примечание = "Обнаружено более 1 позиции головной номенклатуры!"							
							КонецЕсли;								
						КонецЕсли;
						
						СтрокаПозиции.КодСтатьи = СтрокаПозиции.ВидРаботы.СтатьяБДДС.Кодификатор;
						//СтрокаПозиции.ЕдиницаИзмерения = СтрокаПозиции.ВидРаботы.ЕдиницаИзмерения;
						
						СтрокаПозиции.ЦенаРабот = СтрокаПозиции.ВидРаботы.СтоимостьРаботы;
					КонецЕсли;
				КонецЕсли;
				
				Если РезультатДляПозиции.Свойство("confidence") Тогда
					СтрокаПозиции.Уверенность = РезультатДляПозиции.confidence;
				КонецЕсли; 
			Исключение
				// Если не удалось обработать - оставляем пустым
				СтрокаПозиции.Категория = "";
				СтрокаПозиции.ВидРаботы = "";
				СтрокаПозиции.Уверенность = 0;
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьИсключния(СтрокаПозиции)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	гк_КлассификаторВидовРабот.СтатьяБДДС КАК Категория,
	|	гк_КлассификаторВидовРабот.СтатьяБДДС.Наименование КАК КатегорияНаименование
	|ИЗ
	|	Справочник.гк_КлассификаторВидовРабот КАК гк_КлассификаторВидовРабот
	|ГДЕ
	|	НЕ гк_КлассификаторВидовРабот.ПометкаУдаления
	|	И гк_КлассификаторВидовРабот.Ссылка В ИЕРАРХИИ(&Группа)
	|	И НЕ гк_КлассификаторВидовРабот.ЭтоГруппа
	|	И гк_КлассификаторВидовРабот.Кодификатор ПОДОБНО ""%.000""";
	
	Запрос.УстановитьПараметр("Группа", ПапкаРабот);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КатегорияДляИсключения = Выборка.Категория;
	Иначе
		КатегорияДляИсключения = Неопределено;	
	КонецЕсли;
	
	ЕстьИсключения = Ложь;
	
	МассивИсключений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Расходники, ",");
	
	Для каждого СтрИсключения Из МассивИсключений Цикл
		Если СтрНайти(СтрокаПозиции.НаименованиеПозиции, СокрЛП(СтрИсключения)) > 0 Тогда
			ЕстьИсключения = Истина;
			
			СтрокаПозиции.ВидРаботыНаименование = "Расходники";
			СтрокаПозиции.Категория = КатегорияДляИсключения;
			СтрокаПозиции.КодСтатьи = СтрокаПозиции.Категория.Кодификатор;
			СтрокаПозиции.Уверенность = 0;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьИсключения; 

КонецФункции

&НаСервере
Функция ПолучитьЗначениеЦеныПродажи(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Материал", Номенклатура);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.гк_ВидыШаблонаССОМ.Основной);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	гк_ШаблонССОММатериалы.Ссылка КАК Ссылка,
	|	гк_ШаблонССОММатериалы.Материал.гк_ГоловнаяНоменклатура КАК гк_ГоловнаяНоменклатура,
	|	гк_ШаблонССОММатериалы.Цена КАК Цена
	|ИЗ
	|	Документ.гк_ШаблонССОМ.Материалы КАК гк_ШаблонССОММатериалы
	|ГДЕ
	|	гк_ШаблонССОММатериалы.Ссылка.ВидОперации = &ВидОперации
	|	И гк_ШаблонССОММатериалы.Материал.гк_ГоловнаяНоменклатура = &Материал";
		
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДанных.Следующий() Тогда
		ЦенаПродажи = ВыборкаДанных.Цена;				
	Иначе 
		ЦенаПродажи = 0;
	КонецЕсли;
	
	Возврат ЦенаПродажи;
	
КонецФункции

Функция НовыйЗапрос()

	ТаблицаКатегорий = СписокРаботИКатегорий.Выгрузить( , "Категория");
	ТаблицаКатегорий.Свернуть("Категория"); 
	
	СписокДляАнализа = "Список работ:";
	
	Для Каждого СтрокаТЧ Из ТаблицаКатегорий Цикл
		
		СписокДляАнализа = СписокДляАнализа + Символы.ПС + "Категория: " + СтрокаТЧ.Категория.Наименование;
		МассивСтрокРабот = СписокРаботИКатегорий.НайтиСтроки(Новый Структура("Категория", СтрокаТЧ.Категория));
		
		Для каждого СтрокаРаботы Из МассивСтрокРабот Цикл
			СписокДляАнализа = СписокДляАнализа + Символы.ПС + СтрокаРаботы.ВидРаботы.Наименование;
		КонецЦикла;
		
	КонецЦикла; 
	
	МассивДанныхДляАнализа = Новый Массив;
	
	Для каждого СтрокаПозиции Из РезультатыПодбора Цикл
		ДанныеДляАнализа = НовыеДанныеДляАнализа(); 
		
		ДанныеДляАнализа.НаименованиеПозиции = СтрокаПозиции.НаименованиеПозиции;
		ДанныеДляАнализа.ТипМарка = СтрокаПозиции.ТипМарка;
		ДанныеДляАнализа.ЕдиницаИзмерения = СтрокаПозиции.ЕдиницаИзмерения; 
		//ДанныеДляАнализа.СписокДляАнализа = СписокДляАнализа; 
		
		МассивДанныхДляАнализа.Добавить(ДанныеДляАнализа);
	КонецЦикла;
	
	ДанныеДляАнализа =  гк_HTTPКонекторУниверсальный.ЗначениеВСтрокуJSON(МассивДанныхДляАнализа); 
	
	ПравилаСопоставления = ис_НастройкиИнструментов.ПравилаПапки(ПапкаРабот);
	
	ТекстЗапроса = "Проанализируй позиции спецификаций инженерных систем.
		|
		|ПОЗИЦИИ СПЕЦИФИКАЦИЙ:
		|%1
		|
		|ДОСТУПНЫЕ РАБОТЫ ПО КАТЕГОРИЯМ:
		| %2
		|
		|ЗАДАЧА: Определи наиболее подходящие работы для данных позиций.
		|
		|ПРАВИЛА АНАЛИЗА:
		|%3
		|
		|ФОРМАТ ОТВЕТА (строго JSON):
		|{
		|  [{""category"": ""точное название категории из списка"",
		|  ""work"": ""точное название работы из списка"",
		|  ""confidence"": число от 0 до 1}]
		|}
		|
		|Confidence: 1.0 - полное соответствие, 0.8-0.9 - высокая уверенность, 0.5-0.7 - средняя, менее 0.5 - низкая";

	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ДанныеДляАнализа, СписокДляАнализа, ПравилаСопоставления); 
	
	Возврат ТекстЗапроса;

КонецФункции

Функция СформироватьЗапросДляChatGPTРаботы(СтрокаПозиции)
	
	ТаблицаКатегорий = СписокРаботИКатегорий.Выгрузить( , "Категория");
	ТаблицаКатегорий.Свернуть("Категория"); 
	
	СписокДляАнализа = "Список работ:";
	
	Для Каждого СтрокаТЧ Из ТаблицаКатегорий Цикл
		
		СписокДляАнализа = СписокДляАнализа + Символы.ПС + "Категория: " + СтрокаТЧ.Категория.Наименование;
		МассивСтрокРабот = СписокРаботИКатегорий.НайтиСтроки(Новый Структура("Категория", СтрокаТЧ.Категория));
		
		Для каждого СтрокаРаботы Из МассивСтрокРабот Цикл
			СписокДляАнализа = СписокДляАнализа + Символы.ПС + СтрокаРаботы.ВидРаботы.Наименование;
		КонецЦикла;
		
	КонецЦикла; 
	
	ДанныеДляАнализа = НовыеДанныеДляАнализа(); 
	
	ДанныеДляАнализа.НаименованиеПозиции = СтрокаПозиции.НаименованиеПозиции;
	ДанныеДляАнализа.ТипМарка = СтрокаПозиции.ТипМарка;
	ДанныеДляАнализа.ЕдиницаИзмерения = СтрокаПозиции.ЕдиницаИзмерения; 
	ДанныеДляАнализа.СписокДляАнализа = СписокДляАнализа; 
	
	ПравилаСопоставления = ис_НастройкиИнструментов.ПравилаПапки(ПапкаРабот);
	
	ДанныеДляАнализа.Правила = ПравилаСопоставления;
	
	ТекстЗапроса = "Проанализируй позицию спецификации инженерных систем.
		|
		|ПОЗИЦИЯ СПЕЦИФИКАЦИИ:
		|Наименование: %1
		|Тип/Марка: %2
		|Единица измерения: %3
		|
		|ДОСТУПНЫЕ РАБОТЫ ПО КАТЕГОРИЯМ:
		| %4
		|
		|ЗАДАЧА: Определи наиболее подходящую работу для данной позиции.
		|
		|ПРАВИЛА АНАЛИЗА:
		|%5
		|
		|ФОРМАТ ОТВЕТА (строго JSON):
		|{
		|  ""category"": ""точное название категории из списка"",
		|  ""work"": ""точное название работы из списка"",
		|  ""confidence"": число от 0 до 1
		|}
		|
		|Confidence: 1.0 - полное соответствие, 0.8-0.9 - высокая уверенность, 0.5-0.7 - средняя, менее 0.5 - низкая";

	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ДанныеДляАнализа.НаименованиеПозиции, ДанныеДляАнализа.ТипМарка, 
		ДанныеДляАнализа.ЕдиницаИзмерения, ДанныеДляАнализа.СписокДляАнализа, ДанныеДляАнализа.Правила); 
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ОтправитьЗапросChatGPT(ТекстЗапроса)
		
	ОписаниеЗапроса = ai_Запросы.НовоеОписаниеЗапроса();
	
	ОписаниеЗапроса.ТекстЗапроса = ТекстЗапроса;
	ОписаниеЗапроса.КонтекстЗапроса = КонтекстЗапроса();	
	ОписаниеЗапроса.ПараметрыКонфигурацииЗапроса.ФорматОтвета = "json_object";
	ОписаниеЗапроса.ПараметрыКонфигурацииЗапроса.Модель = МодельЗапроса;
	
	//ТекстОтвета = ai_Запросы.ВыполнитьЗапрос(ОписаниеЗапроса, Токен); 
	ТекстОтвета = ai_Запросы.ВыполнитьЗапрос(ОписаниеЗапроса); 
	
	ДанныеОтвет = гк_HTTPКонекторУниверсальный.ЗначениеИзСтрокиJSON(ТекстОтвета);  
	
	Возврат ДанныеОтвет;
	
КонецФункции

// Текст запроса для анализа позиций.
//
// Возвращаемое значение:
//   Строка - Текст запроса.
//
Функция ТекстЗапросаДляАнализаПозиций() Экспорт
	
	ТекстЗапроса = "Проанализируй позицию спецификации инженерных систем.
		|
		|ПОЗИЦИЯ СПЕЦИФИКАЦИИ:
		|Наименование: %1
		|Тип/Марка: %2
		|Единица измерения: %3
		|
		|ДОСТУПНЫЕ РАБОТЫ ПО КАТЕГОРИЯМ:
		| %4
		|
		|ЗАДАЧА: Определи наиболее подходящую работу для данной позиции.
		|
		|ПРАВИЛА АНАЛИЗА:
		|%5
		|
		|ФОРМАТ ОТВЕТА (строго JSON):
		|{
		|  ""category"": ""точное название категории из списка"",
		|  ""work"": ""точное название работы из списка"",
		|  ""confidence"": число от 0 до 1
		|}
		|
		|Confidence: 1.0 - полное соответствие, 0.8-0.9 - высокая уверенность, 0.5-0.7 - средняя, менее 0.5 - низкая";

	Возврат ТекстЗапроса;
	
КонецФункции 

// Заполняет параметры в тексте запроса для анализа позиций.
//
// Параметры:
//   ТекстЗапроса - Строка - Текст запроса. 
//	 ДанныеДляАнализа - Структура - См. НовыеДанныеДляАнализа().
//
Процедура ЗаполнитьПараметрыВТекстеЗапросаДляАнализаПозиций(ТекстЗапроса, ДанныеДляАнализа)  
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ДанныеДляАнализа.НаименованиеПозиции, ДанныеДляАнализа.ТипМарка, 
		ДанныеДляАнализа.ЕдиницаИзмерения, ДанныеДляАнализа.СписокДляАнализа, ДанныеДляАнализа.Правила); 
	
КонецПроцедуры

Функция НовыеДанныеДляАнализа() 
	
	ДанныеДляАнализа = Новый Структура;
	
	ДанныеДляАнализа.Вставить("НаименованиеПозиции", "");
	ДанныеДляАнализа.Вставить("ТипМарка", "");
	ДанныеДляАнализа.Вставить("ЕдиницаИзмерения", "");
	ДанныеДляАнализа.Вставить("Завод", "");
	ДанныеДляАнализа.Вставить("КодИзделия", "");
	//ДанныеДляАнализа.Вставить("СписокДляАнализа", ""); 
	//ДанныеДляАнализа.Вставить("Правила", "");
	
	Возврат ДанныеДляАнализа;
	
КонецФункции

Процедура ЗаполнитьРезультатыПодбора(Результат)
	
	Для каждого СтрокаПозиции Из РезультатыПодбора Цикл
		Попытка
			Если Результат.results[СтрокаПозиции.НомерСтроки-1].Свойство("category") Тогда
				СтрокаПозиции.Категория = НайтиЭлементПоНаименованию(Результат.results[СтрокаПозиции.НомерСтроки-1].category, "КатегорияНаименование"); 
			КонецЕсли;
			
			Если Результат.results[СтрокаПозиции.НомерСтроки-1].Свойство("work") Тогда
				СтрокаПозиции.ВидРаботы = НайтиЭлементПоНаименованию(Результат.results[СтрокаПозиции.НомерСтроки-1].work, "ВидРаботыНаименование"); 
			КонецЕсли;
			
			Если Результат.results[СтрокаПозиции.НомерСтроки-1].Свойство("confidence") Тогда
				СтрокаПозиции.Уверенность = Результат.results[СтрокаПозиции.НомерСтроки-1].confidence;
			КонецЕсли;
		Исключение
			// Если не удалось обработать - оставляем пустым
			СтрокаПозиции.Категория = "";
			СтрокаПозиции.ВидРаботы = "";
			СтрокаПозиции.Уверенность = 0;
		КонецПопытки;	
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиЭлементПоНаименованию(ЗначениеПоиска, ИмяКолонки)

	НайденнаяСтрока = СписокРаботИКатегорий.Найти(ЗначениеПоиска, ИмяКолонки);	
	
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		Возврат НайденнаяСтрока[СтрЗаменить(ИмяКолонки, "Наименование", "")];
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция КонтекстЗапроса()
		
	КонтекстЗапроса = "Ты эксперт по инженерным системам. Анализируй запрос и дай экспертный ответ.";
	
	Возврат КонтекстЗапроса;
	
КонецФункции 

Функция СтандартнаяМодель() Экспорт

	Модель = "gpt-4.1";
	
	Возврат Модель;
	
КонецФункции  

#КонецОбласти 
